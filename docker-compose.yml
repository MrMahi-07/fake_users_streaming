services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spark-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9021:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - spark-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - spark-network

  airflow-init:
    image: my-airflow-image:latest
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/postgres
    restart: no
    healthcheck:
      test: [ "CMD-SHELL", "airflow db check" ]
      interval: 5s
      retries: 5
    entrypoint: >
      bash -c "set -e && airflow db migrate && airflow users list | grep -q 'admin' || airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    networks:
      - spark-network

  airflow-webserver:
    image: my-airflow-image:latest
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/postgres
      AIRFLOW__WEBSERVER__SECRET_KEY: this_is_a_very_secured_key
      PYTHONPATH: /opt/airflow
    volumes:
      - ./scripts/dags:/opt/airflow/dags
      - ./scripts/kafka_scripts:/opt/airflow/kafka_scripts
      - /var/run/docker.sock:/var/run/docker.sock
    command: [ "airflow", "webserver" ]
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - spark-network

  airflow-scheduler:
    image: my-airflow-image:latest
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
      - spark-worker
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres/postgres
      AIRFLOW__WEBSERVER__SECRET_KEY: this_is_a_very_secured_key
      PYTHONPATH: /opt/airflow
    volumes:
      - ./scripts/dags:/opt/airflow/dags
      - ./scripts/kafka_scripts:/opt/airflow/kafka_scripts
      - /var/run/docker.sock:/var/run/docker.sock
    command: [ "airflow", "scheduler" ]
    networks:
      - spark-network

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      SPARK_MODE: master
    volumes:
      - ./scripts/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./scripts/spark/app:/opt/spark/app
      - ./scripts/spark/jars:/opt/spark/jars
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "pip install psycopg2-binary && /opt/bitnami/scripts/spark/run.sh"
    networks:
      - spark-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    ports:
      - "8081:8081"
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
    depends_on:
      - spark-master
    networks:
      - spark-network

volumes:
  postgres_data:
  kafka-data:


networks:
  spark-network:
    driver: bridge
